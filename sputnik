from machine import Pin, I2C, ADC
import time
import ubinascii
import ustruct
from micropython import const

# I2C Setup
i2c = I2C(0, scl=Pin(21), sda=Pin(20), freq=400000)

# INA219 - Current and Voltage Sensor
from ina219 import INA219
ina = INA219(i2c)

def read_power():
    voltage = ina.voltage()
    current = ina.current()
    return voltage, current

# DS18B20 - Temperature Sensor
import onewire, ds18x20
ow = onewire.OneWire(Pin(22))
ds = ds18x20.DS18X20(ow)
sensors = ds.scan()

def read_temperature():
    ds.convert_temp()
    time.sleep_ms(750)
    return ds.read_temp(sensors[0])

# BME280 - Temperature, Humidity, and Pressure
from bme280 import BME280
bme = BME280(i2c=i2c)

def read_bme280():
    temp, pressure, humidity = bme.read_compensated_data()
    return temp / 100, pressure / 256, humidity / 1024

# BH1750 - Light Sensor
from bh1750 import BH1750
bh1750 = BH1750(i2c)

def read_light():
    return bh1750.luminance(BH1750.CONT_HIRES_1)

# MPU6050 - Gyroscope & Accelerometer
from mpu6050 import MPU6050
mpu = MPU6050(i2c)

def read_mpu6050():
    accel = mpu.get_accel()
    gyro = mpu.get_gyro()
    return accel, gyro

# SGP30 - Air Quality Sensor
from sgp30 import SGP30
sgp = SGP30(i2c)
sgp.init_air_quality()

def read_air_quality():
    co2, tvoc = sgp.measure_air_quality()
    return co2, tvoc

# Ublox Neo 6M - GPS Module
import gps
gps = gps.GPS(i2c)

def read_gps():
    gps.update()
    return gps.latitude(), gps.longitude(), gps.altitude()

# SD Card Module
import os
import sdcard
spi = machine.SPI(1, baudrate=1000000, polarity=0, phase=0, sck=Pin(10), mosi=Pin(11), miso=Pin(12))
cs = Pin(13, Pin.OUT)
sd = sdcard.SDCard(spi, cs)
fs = os.VfsFat(sd)
os.mount(fs, "/sd")

def log_data():
    with open("/sd/log.txt", "a") as f:
        f.write("{} V, {} A, {} Â°C, {} hPa, {} %RH, {} lx, {} CO2, {} TVOC, {} {} {}\n".format(
            *read_power(), read_temperature(), *read_bme280(), read_light(), *read_air_quality(), *read_gps()
        ))

while True:
    log_data()
    time.sleep(10)
